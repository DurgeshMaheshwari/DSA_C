#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAX 100 // Maximum size of the stack

// Structure for the stack
typedef struct {
    char data[MAX];
    int top;
} Stack;

// Function to initialize the stack
void initStack(Stack *stack) {
    stack->top = -1;
}

// Function to check if the stack is full
int isFull(Stack *stack) {
    return stack->top == MAX - 1;
}

// Function to check if the stack is empty
int isEmpty(Stack *stack) {
    return stack->top == -1;
}

// Function to push an element onto the stack
void push(Stack *stack, char value) {
    if (isFull(stack)) {
        printf("Stack Overflow! Cannot push '%c'.\n", value);
        return;
    }
    stack->data[++(stack->top)] = value;
}

// Function to pop an element from the stack
char pop(Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack Underflow! Cannot pop.\n");
        return '\0'; // Return null character for underflow
    }
    return stack->data[(stack->top)--];
}

// Function to reverse a string using stack
void reverseString(char str[]) {
    Stack stack;
    initStack(&stack);

    // Push all characters of the string onto the stack
    for (int i = 0; i < strlen(str); i++) {
        push(&stack, str[i]);
    }

    // Pop all characters from the stack and overwrite the string
    for (int i = 0; i < strlen(str); i++) {
        str[i] = pop(&stack);
    }
}

int main() {
    char str[MAX];

    printf("Enter a string to reverse: ");
    fgets(str, MAX, stdin);

    // Remove the trailing newline character from fgets
    str[strcspn(str, "\n")] = '\0';

    printf("Original String: %s\n", str);

    reverseString(str);

    printf("Reversed String: %s\n", str);

    return 0;
}
