#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define MAX 100

typedef struct Stack {
    int arr[MAX];
    int top;
} Stack;

// Initialize the stack
void initStack(Stack *stack) {
    stack->top = -1;
}

// Check if the stack is empty
int isEmpty(Stack *stack) {
    return stack->top == -1;
}

// Push an element onto the stack
void push(Stack *stack, int value) {
    if (stack->top == MAX - 1) {
        printf("Stack overflow!\n");
        exit(EXIT_FAILURE);
    }
    stack->arr[++stack->top] = value;
}

// Pop an element from the stack
int pop(Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack underflow!\n");
        exit(EXIT_FAILURE);
    }
    return stack->arr[stack->top--];
}

// Check if a character is an operator
int isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/';
}

// Perform an operation
int performOperation(char operator, int operand1, int operand2) {
    switch (operator) {
        case '+': return operand1 + operand2;
        case '-': return operand1 - operand2;
        case '*': return operand1 * operand2;
        case '/': 
            if (operand2 == 0) {
                printf("Division by zero error!\n");
                exit(EXIT_FAILURE);
            }
            return operand1 / operand2;
        default:
            printf("Invalid operator: %c\n", operator);
            exit(EXIT_FAILURE);
    }
}

// Evaluate a postfix expression
int evaluatePostfix(const char *expression) {
    Stack stack;
    initStack(&stack);

    for (int i = 0; i < strlen(expression); i++) {
        char c = expression[i];

        // If the character is a space, skip it
        if (c == ' ') {
            continue;
        }

        // If the character is a digit, push it onto the stack
        if (isdigit(c)) {
            push(&stack, c - '0');
        } 
        // If the character is an operator, perform the operation
        else if (isOperator(c)) {
            int operand2 = pop(&stack);
            int operand1 = pop(&stack);
            int result = performOperation(c, operand1, operand2);
            push(&stack, result);
        } 
        else {
            printf("Invalid character in expression: %c\n", c);
            exit(EXIT_FAILURE);
        }
    }

    // The result of the postfix expression is the remaining value on the stack
    return pop(&stack);
}

// Main function
int main() {
    char expression[MAX];

    printf("Enter a postfix expression: ");
    fgets(expression, MAX, stdin);
    expression[strcspn(expression, "\n")] = '\0'; // Remove newline character

    int result = evaluatePostfix(expression);
    printf("Result: %d\n", result);

    return 0;
}
